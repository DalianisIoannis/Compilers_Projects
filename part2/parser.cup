/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/* Package and Import Specifications */
import java_cup.runtime.*;

/** Usercode Components */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/* Symbol Lists */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, EXP, LPAREN, RPAREN, LEFT_BRACKET, RIGHT_BRACKET, COMMA;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String     STRING_LITERAL, STR_SENS;

/*  Non terminals */
non terminal            program;
non terminal String     expr, expr_list, any_string, params, func_body, call_funs, decl_funcs, call_params;      // used to store evaluated subexpressions

/* Precedence Declarations */
precedence left PLUS, MINUS;
precedence right EXP/*, RPAR_LBRACK*/;

/* The Grammar Rules */

program ::= decl_funcs:df call_funs:e SEMI   {:

                                System.out.println("public class Main {");
                                System.out.println("\tpublic static void main(String[] args) {");
                                
                                System.out.printf("%s", e);
                                
                                System.out.println("\t}\n");
                                
                                System.out.printf("%s", df);
                                
                                System.out.println("}");
			                            :}
	;

decl_funcs ::=  STR_SENS:an LPAREN params:p RPAREN LEFT_BRACKET func_body:fb RIGHT_BRACKET                    {: RESULT = "\tpublic static String " + an + "(" + p + ") {\n\t\treturn " + fb + ";\n\t}\n"; :}Î„
    /*new*/     | STR_SENS:an LPAREN RPAREN LEFT_BRACKET func_body:fb RIGHT_BRACKET                    {: RESULT = "\tpublic static String " + an + "() {\n\t\treturn " + fb + ";\n\t}\n"; :}
                | decl_funcs:df STR_SENS:an LPAREN params:p RPAREN LEFT_BRACKET func_body:fb RIGHT_BRACKET    {: RESULT = df + "\tpublic static String " + an + "(" + p + ") {\n\t\treturn " + fb + ";\n\t}\n"; :}
    /*new*/     | decl_funcs:df STR_SENS:an LPAREN RPAREN LEFT_BRACKET func_body:fb RIGHT_BRACKET    {: RESULT = df + "\tpublic static String " + an + "() {\n\t\treturn " + fb + ";\n\t}\n"; :}
                ;

call_funs ::=   STR_SENS:an LPAREN call_params:p RPAREN                   {: RESULT = "\t\tSystem.out.println(" + an + "(" + p + "));\n"; :}
                | STR_SENS:an LPAREN RPAREN                     {: RESULT = "\t\tSystem.out.println(" + an + "());\n"; :}
                | call_funs:cf STR_SENS:an LPAREN RPAREN        {: RESULT = cf + "\t\tSystem.out.println(" + an + "());\n"; :}
                | call_funs:cf STR_SENS:an LPAREN call_params:p RPAREN    {: RESULT = cf + "\t\tSystem.out.println(" + an + "(" + p + "));\n"; :}
                ;

call_params     ::= STR_SENS:par LPAREN RPAREN                    {: RESULT = par + "()"; :}
                | STRING_LITERAL:sens COMMA call_params:cp   {: RESULT = "\"" + sens + "\" ," + cp; :}
                | STR_SENS:par22 LPAREN RPAREN COMMA call_params:cp {: RESULT = par22 + "()" + ", " + cp; :}
                ;

/*
call_params     ::= STR_SENS:par LPAREN RPAREN COMMA STRING_LITERAL:par22 COMMA STR_SENS:par33 LPAREN RPAREN {: RESULT = par + "(), \"" + par22 + "\", " + par33 + "()"; :}
                ;
*/

params      ::= STR_SENS:par                    {: RESULT = "String " + par; :}
            | params:par COMMA STR_SENS:par22   {: RESULT = par + ", " + "String " + par22; :}
            ;

func_body   ::= STRING_LITERAL:sens                     {:RESULT = "\"" + sens + "\""; :}
            | STR_SENS:par                              {:RESULT = par; :}
            | func_body:par PLUS STR_SENS:par1             {:RESULT = par + " + " + par1; :}
            ;