/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/* Package and Import Specifications */
import java_cup.runtime.*;

/** Usercode Components */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/* Symbol Lists */

/* Terminals (tokens returned by the scanner). */
terminal            PLUS, LPAREN, RPAREN, LEFT_BRACKET, RIGHT_BRACKET, COMMA, IF, ELSE, PREFIX, SUFFIX, IDENTIFIER;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String     STRING_LITERAL, STR_SENS;

/*  Non terminals */
non terminal            program /*, call_params*/;
non terminal String     params, func_body, call_funs, decl_funcs, call_params, ret_stmt, if_stmt, condition; // used to store evaluated subexpressions

/* Precedence Declarations */
/*precedence left PLUS, MINUS;*/
/*precedence right EXP;*/

precedence left IF, ELSE;
precedence left COMMA;
precedence left PREFIX, SUFFIX;
precedence left PLUS;
precedence left LPAREN, RPAREN;
precedence left LEFT_BRACKET, RIGHT_BRACKET;

/* The Grammar Rules */

program ::= decl_funcs:df call_funs:e {:

                                System.out.println("\n\npublic class Main {");
                                System.out.println("\tpublic static void main(String[] args) {");
                                
                                System.out.printf("%s", e);
                                
                                System.out.println("\t}\n");
                                
                                System.out.printf("%s", df);
                                
                                System.out.println("}\n");
			                            :}
	;

decl_funcs ::=  STR_SENS:an LPAREN params:p RPAREN LEFT_BRACKET func_body:fb RIGHT_BRACKET                      {: RESULT = "\tpublic static String " + an + "(" + p + ") {\n\t\treturn " + fb + ";\n\t}\n"; :}Î„
    /*new*/     | STR_SENS:an LPAREN RPAREN LEFT_BRACKET func_body:fb RIGHT_BRACKET                             {: RESULT = "\tpublic static String " + an + "() {\n\t\treturn " + fb + ";\n\t}\n"; :}
                | decl_funcs:df STR_SENS:an LPAREN params:p RPAREN LEFT_BRACKET func_body:fb RIGHT_BRACKET      {: RESULT = df + "\tpublic static String " + an + "(" + p + ") {\n\t\treturn " + fb + ";\n\t}\n"; :}
    /*new*/     | decl_funcs:df STR_SENS:an LPAREN RPAREN LEFT_BRACKET func_body:fb RIGHT_BRACKET               {: RESULT = df + "\tpublic static String " + an + "() {\n\t\treturn " + fb + ";\n\t}\n"; :}
                ;

call_funs ::=   STR_SENS:an LPAREN call_params:p RPAREN                     {: RESULT = "\t\tSystem.out.println(" + an + "(" + p + "));\n"; :}
                | STR_SENS:an LPAREN RPAREN                                 {: RESULT = "\t\tSystem.out.println(" + an + "());\n"; :}
                | call_funs:cf STR_SENS:an LPAREN RPAREN                    {: RESULT = cf + "\t\tSystem.out.println(" + an + "());\n"; :}
                | call_funs:cf STR_SENS:an LPAREN call_params:p RPAREN      {: RESULT = cf + "\t\tSystem.out.println(" + an + "(" + p + "));\n"; :}
                ;

/*
                | call_funs:cf STR_SENS:an LPAREN STR_SENS:an2 RPAREN        {: RESULT = cf + an + an2; :}
                | STR_SENS:an LPAREN STR_SENS:p RPAREN                     {: RESULT = "\t\tSystem.out.println(" + an + "(" + p + "));\n"; :}
                | STR_SENS:an LPAREN STR_SENS:p RPAREN                     {: RESULT = an + p; :}
                | IDENTIFIER:par                                      {: RESULT = par; :}
*/

/*
call_params     ::= STR_SENS:par LPAREN RPAREN                      {: RESULT = par + "()"; :}
                | STR_SENS:par22 LPAREN RPAREN COMMA call_params:cp {: RESULT = par22 + "()" + ", " + cp; :}
                | STRING_LITERAL:par                                {: RESULT = "\"" + par + "\""; :}
                | STRING_LITERAL:sens COMMA call_params:cp          {: RESULT = "\"" + sens + "\" ," + cp; :}                
                | STR_SENS:par                                      {: RESULT = par; :}
                ;
*/

call_params     ::= call_params:cp COMMA STR_SENS:par      {: RESULT = cp + ", "; :}
                | call_params:cp COMMA STRING_LITERAL:par   {: RESULT = cp + ", " + par; :}
                | call_params:cp COMMA STR_SENS:par LPAREN RPAREN   {: RESULT = cp + ", " + "()"; :}
                | call_params:cp COMMA STR_SENS:par LPAREN call_params:cp1 RPAREN   {: RESULT = cp + ", " + "(" + cp1 + ")"; :}
                | STR_SENS:par LPAREN RPAREN            {: RESULT = "()"; :}
                | STR_SENS:par LPAREN call_params:cp RPAREN   {: RESULT = " " + cp; :}
                | STRING_LITERAL:par                     {: RESULT = "\"" + par + "\""; :}
                ;
                
                // | expr:e1 MINUS expr:e2        {: RESULT = String.format("%s - %s", e1, e2); :}

params      ::= STR_SENS:par                    {: RESULT = "String " + par; :}
            | STR_SENS:par22 COMMA params:par {: RESULT = par22 + ", " + "String " + par; :}
            ;

/*
params      ::= STR_SENS:par                    {: RESULT = "String " + par; :}
            | params:par COMMA STR_SENS:par22   {: RESULT = par + ", " + "String " + par22; :}
            ;
*/

condition   ::= STR_SENS:par                    {: RESULT = par; :}
            | STR_SENS:par PREFIX STRING_LITERAL:sens {: RESULT = "\"" + sens + "\".startsWith(" + par + ")"; :}
            | STRING_LITERAL:sens PREFIX STR_SENS:par {: RESULT = par + ".startsWith(\"" + sens + "\")"; :}
            | STR_SENS:par SUFFIX STRING_LITERAL:sens {: RESULT = "\"" + sens + "\".endsWith(" + par + ")"; :}
            | STRING_LITERAL:sens SUFFIX STR_SENS:par {: RESULT = par + ".endsWith(\"" + sens + "\")"; :}
            ;

func_body   ::= ret_stmt:r {:RESULT = r; :}
            | if_stmt:r {:RESULT = r; :}
            ;

ret_stmt ::= STRING_LITERAL:sens                         {:RESULT = "\"" + sens + "\""; :}
            | STR_SENS:par                                  {:RESULT = par; :}
            | ret_stmt:par PLUS STR_SENS:par1              {:RESULT = par + " + " + par1; :}
            | STR_SENS:par LPAREN call_params:cp RPAREN                                  {:RESULT = par + "(" + cp + ")"; :}
            | STR_SENS:par LPAREN RPAREN                                  {:RESULT = par + "()"; :}
            ;

if_stmt ::= IF LPAREN condition:cond RPAREN func_body:fb ELSE func_body:fb2 {:RESULT = "(" + cond + ") ? " + fb + " : " + fb2 + ""; :}
            ;