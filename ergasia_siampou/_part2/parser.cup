/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            PLUS, LPAREN, RPAREN, IDENTIFIER, COMMA, LBRACK, RBRACK, IF, ELSE, PREFIX, SUFFIX;
terminal String     STRING_LITERAL;        // our scanner provides numbers as strings

/*  Non terminals */
non terminal String    call;
non terminal String    fcall;
non terminal String    args;
non terminal String    fargs;
non terminal String    func;
non terminal String    if_stment;
non terminal String    body;
non terminal String    cond;
non terminal           call_list;
non terminal           func_list;
non terminal           ret_val;
non terminal           main;

/**
 *  Precedence Declarations
 */

precedence left IF, ELSE;
precedence left COMMA;
precedence left PREFIX, SUFFIX;
precedence left PLUS;
precedence left LPAREN, RPAREN;
precedence left LBRACK, RBRACK;

/**
 *  The Grammar Rules
 */


main        ::= func_list:f call_list:c                                         {: System.out.println("public class Main {\n" + c + "\t\n\t}" + "\n\t" + f + "\n}"); :};

/* function declaration */

func_list   ::= func_list:fl func:f                                             {: RESULT = fl + f + "\t" ; :}
            | func:f                                                            {: RESULT = f + "\n" + "\t"; :}
            ;

func        ::= IDENTIFIER:id LPAREN fargs:a RPAREN LBRACK body:b RBRACK        {: RESULT ="public static String " + id + "(String " + a + ") {\n\t\t" + b + ";\n\t}\n"; :}
            | IDENTIFIER:id LPAREN RPAREN LBRACK body:b RBRACK                  {: RESULT ="public static String " + id + "(" + ") {\n\t\t" + b + ";\n\t}\n"; :}
            ;

/* function body */

body        ::= ret_val:val                                                     {: RESULT = "return " + val; :} 
            ;

/* function call inside function body supports identifiers */

fcall        ::= IDENTIFIER:id LPAREN fargs:a RPAREN                            {: RESULT = id + "(" + a + ")"; :}
            | IDENTIFIER:id LPAREN args:a RPAREN                                {: RESULT = id + "(" + a + ")"; :}            
            | IDENTIFIER:id LPAREN RPAREN                                       {: RESULT = id + "(" + ")"; :}
            ;

fargs       ::= IDENTIFIER:id COMMA fargs:f                                     {: RESULT = id + ", " + "String " + f; :}
            | IDENTIFIER:id                                                     {: RESULT = id + ""; :}
            ;

ret_val     ::= ret_val:v PLUS LPAREN ret_val:va RPAREN                         {: RESULT = v + "+ (" + va + ")"; :}
            | ret_val:v PLUS STRING_LITERAL:s                                   {: RESULT = v + " + " + "\"" + s + "\""; :}
            | ret_val:v PLUS IDENTIFIER:id                                      {: RESULT = v + " + " + id; :}
            | ret_val:v PLUS if_stment:i                                        {: RESULT = v + " + " + i; :}
            | LPAREN ret_val:v RPAREN                                           {: RESULT = "(" + v + ")"; :}
            | ret_val:v PLUS fcall:c                                            {: RESULT = v + " + " + c; :}
            | STRING_LITERAL:s                                                  {: RESULT = "\"" + s + "\""; :}
            | IDENTIFIER:id                                                     {: RESULT = id; :}
            | if_stment:i                                                       {: RESULT = i; :}
            | fcall:c                                                           {: RESULT = c; :}
            ;

if_stment   ::= IF cond:c1 ret_val:v1 ELSE ret_val:v2                           {: RESULT = "(" + "(" + c1  + ")" + "?" + v1 + ":" + v2 + ")"; :}                
            | LPAREN IF cond:c1 ret_val:v1 ELSE ret_val:v2 RPAREN               {: RESULT = "(" + "(" + c1  + ")" + "?" + v1 + ":" + v2 + ")"; :}
            
            ;

cond        ::= LPAREN ret_val:str1 PREFIX ret_val:str2 RPAREN                  {: RESULT = "(" + str2 + ")" + ".startsWith(" + str1 + ")"; :}
            | LPAREN ret_val:str1 SUFFIX ret_val:str2 RPAREN                    {: RESULT = "(" + str2 + ")" + ".endsWith(" + str1 + ")"; :}
            ;

/* function calls */

call_list   ::= call_list:cl call:c                                             {: RESULT = cl + "\n\t\tSystem.out.println("+ c + ");"; :}
            | call:c                                                            {: RESULT = "\tpublic static void main(String[] args) {\n\t\tSystem.out.println("+ c + ");"; :}
            ;

call        ::= IDENTIFIER:id LPAREN args:a RPAREN                              {: RESULT = id + "(" + a + ")"; :}            
            | IDENTIFIER:id LPAREN RPAREN                                       {: RESULT = id + "(" + ")"; :}
            ;

args        ::= STRING_LITERAL:s COMMA args:a                                   {: RESULT = "\"" + s + "\"" + ", " + a; :}
            | STRING_LITERAL:s                                                  {: RESULT = "\"" + s + "\""; :}
            | call:c COMMA args:a                                               {: RESULT = c + ", " + a; :}
            | call:c                                                            {: RESULT = c; :}
            | if_stment:i                                                       {: RESULT = i; :}
            | if_stment:i COMMA args:a                                          {: RESULT = i + ", " + a; :}
            | args:a1 PLUS args:a2                                              {: RESULT = a1 + "+" + a2; :}
            ;