
javac Mymain.java
java Mymain

(10-9)+(3-1)**((9-3+1)-2) 	= 33
1 							= 1
( 							= error
01 							= error
0 							= 0
10 							= 10
(1)1 						= error
1+(9**1)-(9)**2+(1**0) 		= -70
** 							= error
(10+1-0+18)**01 			= error
)							= error
+1+(1)								= error
1+(1)								= 2
0000005								= error
10000005							= 10000005
()									= ERROR GIA TORA
((2-(6+8**3)))+1-(12)**(1+(5-2)) 	= -21251
2**3**2								= 512
((2**3**2))                         = 512
()+1

Την ακολουθία "()" για την ώρα την αντιμετωπίζω σαν parse error. Είναι σωστό ή να το αλλάξω?

exp -> num | exp op exp | (exp)

op -> + | - | **

num -> digit | digit num

digit -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

You need to change this grammar to support priority between the operators, to remove the left recursion for LL parsing, etc.

This part of the homework is divided in two tasks:

For practice, you can write the FIRST+ & FOLLOW sets for the LL(1) version of the above grammar. In the end you will summarize them in a single lookahead table (include a row for every derivation in your final grammar).
This part will not be graded.

You have to write a recursive descent parser in Java that reads expressions and computes the values or prints "parse error" if there is a syntax error. You don't need to identify blank spaces. You can read the symbols one-by-one
(as in the C getchar() function). The expression must end with a newline or EOF.

Your parser should read its input from the standard input (e.g., via an InputStream on System.in) and write the computed values of expressions to the standard output (System.out). Parse errors should be reported on standard
error (System.err).